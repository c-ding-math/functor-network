var buildDom = ace.require("ace/lib/dom").buildDom;
var editor = ace.edit();
editor.setOptions({
    //theme: "ace/theme/textmate",
    //mode: "ace/mode/latex",
    showPrintMargin: false,
    fontSize: "inherit",
    highlightActiveLine: false,
    wrap: true,
    indentedSoftWrap: false,
    enableMultiselect: false,
    selectionStyle: "text",
    placeholder: "Your main content here...",
    //showLineNumbers: false,
    showGutter: false,
    autoScrollEditorIntoView: true,
    //showInvisibles: true,
    //maxLines: 15,  // this is going to be very slow on large documents
    //minLines: 15,
    //behavioursEnabled: false, // disable autopairing of brackets and tags
});
var editorWrapper = $("<div/>");
var refs = {};
buildDom(["div", { class: "editor-toolbar" },
    ["ul", {class:"list-inline text-lowercase"},//Meta Text Math Edit Preview Format 
        ["li", {class: "dropdown"},
            ["a", {href: "#", class: "dropdown-toggle", "data-toggle": "dropdown"}, "Meta"],
            ["ul", {class: "dropdown-menu"},
                ["li", ["a", {href: "#", onclick: preamble},"Latex Preamble"],],
                ["li", ["a", {href: "#", onclick: citation},"Citation"],],
            ],
        ],


        ["li", {class: "dropdown"},
            ["a", {href: "#", class: "dropdown-toggle", "data-toggle": "dropdown"}, "Text"],
            ["ul", {class: "dropdown-menu"}, //Italic, Bold, Quote, Heading, Unordered List, Ordered List, Link, Image
                ["li", ["a", {href: "#", onclick: italic},"Italic"],],
                ["li", ["a", {href: "#", onclick: bold},"Bold"],],
                ["li", ["a", {href: "#", onclick: quote},"Quote"],],
                ["li", ["a", {href: "#", onclick: heading},"Heading"],],
                ["li", ["a", {href: "#", onclick: unorderedList},"Unordered List"],],
                ["li", ["a", {href: "#", onclick: orderedList},"Ordered List"],],
                ["li", ["a", {href: "#", onclick: link},"Link"],],
                ["li", ["a", {href: "#", onclick: image},"Image"],],
            ], 
        ],

        ["li", {class: "dropdown"},
            ["a", {href: "#", class: "dropdown-toggle", "data-toggle": "dropdown"}, "Math"],
            ["ul", {class: "dropdown-menu"},//Inline Math, Display Math, Numbered Equation, Aligned Equation, Equation Reference, Theorem, Proof
                ["li", ["a", {href: "#", onclick: inlineMath},"Inline Math"],],
                ["li", ["a", {href: "#", onclick: displayMath},"Display Math"],],
                ["li", ["a", {href: "#", onclick: numberedEquation},"Numbered Equation"],],
                ["li", ["a", {href: "#", onclick: alignedEquation},"Aligned Equation"],],
                ["li", ["a", {href: "#", onclick: equationReference},"Equation Reference"],],
                ["li", ["a", {ref: "theorem", href: "#", onclick: theorem},"Theorem-like environment"],],
                ["li", ["a", {ref: "proof", href: "#", onclick: proof},"Proof"],],
            ],
        ],

        ["li", {class: "dropdown"},
            ["a", {href: "#", class: "dropdown-toggle", "data-toggle": "dropdown"}, "Edit"],
            ["ul", {class: "dropdown-menu"},//Full screen, Find and Replace, Undo, Redo
                ["li", ["a", {href: "#", onclick: fullScreen},"Full Screen"],],
                ["li", ["a", {href: "#", onclick: function(){editor.execCommand("find");return false;}},"Find"],],
                ["li", ["a", {href: "#", onclick: function(){editor.execCommand("replace");return false;}},"Replace"],],
                ["li", ["a", {href: "#", onclick: function(){editor.undo();editor.focus();return false;}},"Undo"],],
                ["li", ["a", {href: "#", onclick: function(){editor.redo();editor.focus();return false;}},"Redo"],],
            ],
        ],

        ["li", {class: "dropdown"},
            ["a", {href: "#", class: "dropdown-toggle", "data-toggle": "dropdown"}, "Help"],
            ["ul", {class: "dropdown-menu"},//Format, Syntax, Shortcuts, Default Settings
                ["li", ["a", {href: '@{EditHelpR "format"}', target: "_blank"},"Format Comparison"],],
                ["li", ["a", {ref: "syntax", href: '@{EditHelpR "syntax"}', target: "_blank"},"Syntax"],],
                ["li", ["a", {href: '@{EditHelpR "shortcuts"}', target: "_blank"},"Shortcuts"],],
                ["li", ["a", {href: "@{SettingsR}"+"#editor-setting", target: "_blank"},"Settings"],],
            ],
        ],

        ["li", {}, ["a", {href: "#", onclick: function(){editor.focus();render();return false;},}, "Preview"],],

    ],

], editorWrapper[0], refs);

var commands = [
    {name: "italic", bindKey: {win: "Alt-I", mac: "Option-I"}, exec: italic},
    {name: "bold", bindKey: {win: "Alt-B", mac: "Option-B"}, exec: bold},
    {name: "quote", bindKey: {win: "Alt-Q", mac: "Option-Q"}, exec: quote},
    {name: "heading", bindKey: {win: "Alt-H", mac: "Option-H"}, exec: heading},
    {name: "unorderedList", bindKey: {win: "Alt-U", mac: "Option-U"}, exec: unorderedList},
    {name: "orderedList", bindKey: {win: "Alt-O", mac: "Option-O"}, exec: orderedList},
    {name: "foldSelection", bindKey: {win: "Alt-L", mac: "Option-L"}, exec: link},//link
    {name: "image", bindKey: {win: "Alt-G", mac: "Option-G"}, exec: image},
    {name: "preamble", bindKey: {win: "Alt-P", mac: "Option-P"}, exec: preamble},
    {name: "citation", bindKey: {win: "Alt-C", mac: "Option-C"}, exec: citation},
    {name: "render", bindKey: {win: "Ctrl-Enter", mac: "Command-Enter"}, exec: render},
    {name: "inlineMath", bindKey: {win: "Alt-1", mac: "Option-1"}, exec: inlineMath},
    {name: "displayMath", bindKey: {win: "Alt-2", mac: "Option-2"}, exec: displayMath},
    {name: "numberedEquation", bindKey: {win: "Alt-3", mac: "Option-3"}, exec: numberedEquation},
    {name: "alignedEquation", bindKey: {win: "Alt-4", mac: "Option-4"}, exec: alignedEquation},
    {name: "equationReference", bindKey: {win: "Alt-5", mac: "Option-5"}, exec: equationReference},
    {name: "theorem", bindKey: {win: "Alt-6", mac: "Option-6"}, exec: theorem},
    {name: "proof", bindKey: {win: "Alt-7", mac: "Option-7"}, exec: proof},
    {name: "fullScreen", bindKey: {win: "Alt-Enter", mac: "Option-Enter"}, exec: fullScreen},
];
commands.forEach(function(command) {
    editor.commands.addCommand(command);
});
editor.commands.removeCommand("showSettingsMenu"); 

var editorContainer = $(editor.container);
var previewArea = $("<div/>",{class: "entry-content-wrapper"});
var entryBody = $("textarea[name='content']");
editor.session.setValue(entryBody.val());
editorWrapper.append(editorContainer).append($("<div/>",{class: "editor-preview"}).append(previewArea)).insertAfter(entryBody).css({width: "100%", border:entryBody.css("border"), "border-radius":entryBody.css("border-radius")});
$(".editor-toolbar>ul>li>a").addClass("text-muted");

var entryFormat = $("select[name='format']");
var questionSvg = '<svg style="height:1em; vertical-align:middle;" class="bi bi-question-circle-fill" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM6.57 6.033H5.25C5.22 4.147 6.68 3.5 8.006 3.5c1.397 0 2.673.73 2.673 2.24 0 1.08-.635 1.594-1.244 2.057-.737.559-1.01.768-1.01 1.486v.355H7.117l-.007-.463c-.038-.927.495-1.498 1.168-1.987.59-.444.965-.736.965-1.371 0-.825-.628-1.168-1.314-1.168-.901 0-1.358.603-1.358 1.384zm1.251 6.443c-.584 0-1.009-.394-1.009-.927 0-.552.425-.94 1.01-.94.609 0 1.028.388 1.028.94 0 .533-.42.927-1.029.927z"/></svg>';
entryFormat.wrap('<span class="format-wrapper"></span>').before($("<label/>",{html: "format:", class:"text-muted", style:"font-weight: normal;"})).after($("<a/>",{class:"text-muted", href: '@{EditHelpR "format"}', target: "_blank", html: questionSvg})).before(" ").after(" ");
//$("<li/>",{style:"margin-left:auto;"}).appendTo(".editor-toolbar>ul").append(entryFormat);
//$(".editor-toolbar>ul").css({display: "-webkit-flex", display: "-ms-flex", display: "flex", "align-items": "center"});

entryBody.hide();
window.editor = editor;
editor.focus();
editorContainer.addClass("editor-focus");
editor.on("focus", function() {
    editorContainer.addClass("editor-focus");
});
editor.on("blur", function() {
    editorContainer.removeClass("editor-focus");
});

var originalFormatSelected=entryFormat.children("option:selected").val();
entryFormat.change(function(){
    var selected=$(this).children("option:selected").val();
    var format="md"
    if (selected=="2"){
        format="tex"
    }
    var currentUrl = window.location.href.split(/[?#]/)[0]+ '?format=' + format;
    var elementId = window.location.href.match(/#[^?]*/);
    if (elementId){
        currentUrl=currentUrl+elementId;
    }   
    window.location.href = currentUrl 
});

//prevent refeshing page if the content is not saved
var originalContent=editor.getValue();
$("form").submit(function(){
    entryBody.val(editor.getValue());
    originalContent=editor.getValue();
});
$(window).on('beforeunload', function(){
    if (editor.getValue()!=originalContent){
        if(! confirm("You have unsaved changes. Are you sure you want to leave this page?")){
            entryFormat.val(originalFormatSelected);
            return false;
        }
    }
});

$(document).ready(function(){//important! Otherwise the page may not load entirely
    if (editor.getValue() !== ""){
        render();
    }
});

function render() {
    entryBody.val(editor.getValue());
    var entryData = JSON.stringify ({
                editorContent: entryBody.val(),
                editorPreamble: $('textarea[name="preamble"]').val(),
                editorCitation: $('textarea[name="citation"]').val(),
            });
    $.ajax({
        type: "POST",
        dataType: "text",
        global: false,
        url: "@{parserRoute}",
        data: entryData,
        contentType:"application/json; charset=utf-8",
        //data: options.previewParserVar+'='+encodeURIComponent(parsedData),
        beforeSend: function() {
            previewArea.css("opacity", "0.75");
        },
        success: function(data) {
            previewArea.html(data);
            previewArea.find(".alert-danger.parser-message").each(function(){
                $(this).append("<div class='text-muted'>Unable to figure out the error? " + 
                    "<a href='@{FeedbackR}' target='_blank'>Report it</a>. " +
                    " We can help you!</div>");
                    
            });
        },
        complete: function() {
            previewArea.css("opacity", "1");
        },
    });
    return false;
}

function fullScreen() {
    if (editorWrapper.hasClass("editor-full-screen")) {
        editorWrapper.removeClass("editor-full-screen");
        $(this).text("Full Screen");
    } else {
        editorWrapper.addClass("editor-full-screen");
        $(this).text("Normal View");
    }
    editor.resize();
    editor.focus();
    return false;

}

function inlineMath() {
    var selectedText = editor.getSelectedText();
    if (selectedText === "") {
        editor.insertSnippet("$${1:latex code}$");
    }else{
        editor.session.replace(editor.getSelectionRange(), "$" + selectedText.trim() + "$");
    }
    editor.focus();
    return false;
}

function displayMath() {
    var selectedText = editor.getSelectedText();
    if (selectedText === "") {
        editor.insertSnippet("$$${1:latex code}$$");
    }else{
        editor.session.replace(editor.getSelectionRange(), "$$" + selectedText.trim() + "$$");
    }
    editor.focus();
    return false;
}

function numberedEquation() {
    var block=mathBlock();
    var selectedText = editor.getSelectedText();
    if (selectedText === "") {
        editor.insertSnippet(block.open+("\\begin{equation}\n${1:latex code}\n\\end{equation}")+block.close);
    } else {
        editor.session.replace(editor.getSelectionRange(),block.open+("\\begin{equation}\n" + selectedText + "\n\\end{equation}")+block.close);
        editor.gotoLine(editor.getSelectionRange().end.row+1+1-block.close.length);
    }
    editor.focus();
    return false;
}

function alignedEquation() {
    var block=mathBlock();
    var selectedText = editor.getSelectedText();
    if (selectedText === "") {
        editor.insertSnippet(block.open+("\\begin{align*}\n${1:  & first line\\\\\\\\\n  & second line\\\\\\\\\n  & ...}\n\\end{align*}")+block.close);
    } else {
        editor.session.replace(editor.getSelectionRange(),block.open+("\\begin{align*}\n" + selectedText + "\n\\end{align*}")+block.close);
        editor.gotoLine(editor.getSelectionRange().end.row+1+1-block.close.length);
    }
    editor.focus();
    return false;
}

function equationReference(){
    var selectedText = editor.getSelectedText();
    if (selectedText === "") {
        editor.insertSnippet("\\eqref{" + "${1:label}" + "}");
    }else{
        editor.session.replace(editor.getSelectionRange(), "\\eqref{" + selectedText + "}");
    }
    editor.focus();
    return false;
}

function preamble() {
    var entryPreamble = $('textarea[name="preamble"]');
    var modalPreamble = $('<textarea/>',{class:"form-control",html:entryPreamble.val()});
    var modal = newModal({
        header: '<b>Latex preamble</b>',
        body: $('<div/>').append('<p>Include latex packages and define new commands below.</p>').append(modalPreamble),
        footer: [
            $('<button/>',{class:"btn btn-primary",type:"button",html:"Save"}).click(function() {
                entryPreamble.val(modalPreamble.val());
                modal.modal("hide");
                editor.focus();
            }),
        ],
    });
    modal.appendTo("body").modal({show: true});
    return false;
}

function mathBlock() {
    var blockOpen = "", blockClose = "";
    var selectedRange = editor.getSelectionRange()
    , startRow = selectedRange.start.row
    , startColumn = selectedRange.start.column
    , endRow = selectedRange.end.row
    , endColumn = selectedRange.end.column;
    if (startColumn !== 0) {
        blockOpen = "\n";
    } 
    if (endColumn !== editor.session.getLine(endRow).length) {
        blockClose = "\n";
    } else {
        if (endRow == editor.session.getLength() - 1) {
            blockClose = "\n";
        }
    }
    return {open:blockOpen, close:blockClose};
}

function newModal(options) {
    //options: {header, body, footer}
    var modal = $('<div/>',{class: "modal fade", tabindex: "-1", role: "dialog"});
    var dialog = $('<div/>',{class: "modal-dialog", role: "document"});
    var content = $('<div/>',{class: "modal-content"});
    var header = $('<div/>',{class: "modal-header"});
    var body = $('<div/>',{class: "modal-body"});
    var footer = $('<div/>',{class: "modal-footer"});
    var close = $('<button/>',{class:"close",html:'<span aria-hidden="true">&times;</span>', type:"button", "aria-label":"Close"}).click(function() {
        modal.modal("hide");
    });
    modal.append(dialog);
    dialog.append(content);
    content.append(header);
    content.append(body);
    header.append(close);
    header.append(options.header);
    body.append(options.body);
    if(options.footer){
        content.append(footer);
        footer.append(options.footer);
    } 
    return modal;
}
