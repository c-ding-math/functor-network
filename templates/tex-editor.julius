

var buildDom = ace.require("ace/lib/dom").buildDom;
var editor = ace.edit();
editor.setOptions({
    //theme: "ace/theme/textmate",
    //mode: "ace/mode/latex",
    showPrintMargin: false,
    fontSize: "inherit",
    highlightActiveLine: false,
    wrap: true,
    indentedSoftWrap: false,
    enableMultiselect: false,
    selectionStyle: "text",
    placeholder: "Your main content here...",
    //showLineNumbers: false,
    showGutter: false,
    autoScrollEditorIntoView: true,
    //showInvisibles: true,
    //maxLines: 15,  // this is going to be very slow on large documents
    //minLines: 15,
    //behavioursEnabled: false, // disable autopairing of brackets and tags
});

var editorWrapper = $("<div/>");
var refs = {};
buildDom(["div", { class: "editor-toolbar menu" },
    ["ul", {style:"width:100%;"},//Meta Text Math Edit Preview Format 
        ["li", {class: "dropdown"},
            ["a", {href: "#", class: "dropdown-toggle", "data-toggle": "dropdown"}, "Meta"],
            ["ul", {class: "dropdown-menu"},
                ["li", ["a", {href: "#", onclick: preamble},"Latex Preamble"],],
                ["li", ["a", {href: "#", onclick: citation},"Citation"],],
            ],
        ],


        ["li", {class: "dropdown"},
            ["a", {href: "#", class: "dropdown-toggle", "data-toggle": "dropdown"}, "Text"],
            ["ul", {class: "dropdown-menu"}, //Italic, Bold, Quote, Heading, Unordered List, Ordered List, Link, Image
                ["li", ["a", {href: "#", onclick: italic},"Italic"],],
                ["li", ["a", {href: "#", onclick: bold},"Bold"],],
                ["li", ["a", {href: "#", onclick: quote},"Quote"],],
                ["li", ["a", {href: "#", onclick: heading},"Heading"],],
                ["li", ["a", {href: "#", onclick: unorderedList},"Unordered List"],],
                ["li", ["a", {href: "#", onclick: orderedList},"Ordered List"],],
                ["li", ["a", {href: "#", onclick: link},"Link"],],
                ["li", ["a", {href: "#", onclick: image},"Image"],],
            ], 
        ],

        ["li", {class: "dropdown"},
            ["a", {href: "#", class: "dropdown-toggle", "data-toggle": "dropdown"}, "Math"],
            ["ul", {class: "dropdown-menu"},//Inline Math, Display Math, Numbered Equation, Aligned Equation, Equation Reference, Theorem, Proof
                ["li", ["a", {href: "#", onclick: inlineMath},"Inline Math"],],
                ["li", ["a", {href: "#", onclick: displayMath},"Display Math"],],
                ["li", ["a", {href: "#", onclick: numberedEquation},"Numbered Equation"],],
                ["li", ["a", {href: "#", onclick: alignedEquation},"Aligned Equation"],],
                ["li", ["a", {href: "#", onclick: equationReference},"Equation Reference"],],
                //["li", ["a", {href: "#", onclick: theorem},"Theorem"],],
                //["li", ["a", {href: "#", onclick: proof},"Proof"],],
            ],
        ],
        ["li", {class: "dropdown"},
            ["a", {href: "#", class: "dropdown-toggle", "data-toggle": "dropdown"}, "Edit"],
            ["ul", {class: "dropdown-menu"},//Full screen, Find and Replace, Undo, Redo
                ["li", ["a", {href: "#", onclick: fullScreen},"Full Screen"],],
                ["li", ["a", {href: "#", onclick: function(){editor.execCommand("find");return false;}},"Find"],],
                ["li", ["a", {href: "#", onclick: function(){editor.execCommand("replace");return false;}},"Replace"],],
                ["li", ["a", {href: "#", onclick: function(){editor.undo();editor.focus();return false;}},"Undo"],],
                ["li", ["a", {href: "#", onclick: function(){editor.redo();editor.focus();return false;}},"Redo"],],
            ],
        ],

        ["li", {class: "dropdown"},
            ["a", {href: "#", class: "dropdown-toggle", "data-toggle": "dropdown"}, "Help"],
            ["ul", {class: "dropdown-menu"},//Format, Syntax, Shortcuts, Default Settings
                ["li", ["a", {href: '@{EditHelpR "format"}', target: "_blank"},"Format"],],
                ["li", ["a", {href: '@{EditHelpR "syntax"}'+'?format=tex', target: "_blank"},"Syntax"],],
                ["li", ["a", {href: '@{EditHelpR "shortcuts"}', target: "_blank"},"Shortcuts"],],
                ["li", ["a", {href: "@{SettingsR}"+"#editor-setting", target: "_blank"},"Settings"],],
            ],
        ],

        ["li", {}, ["a", {href: "#", onclick: function(){editor.focus();render();return false;},}, "Preview"],],

    ],

], editorWrapper[0], refs);

var commands = [
    {name: "italic", bindKey: {win: "Alt-I", mac: "Command-Option-I"}, exec: italic},
    {name: "bold", bindKey: {win: "Alt-B", mac: "Command-Option-B"}, exec: bold},
    {name: "quote", bindKey: {win: "Alt-Q", mac: "Command-Option-Q"}, exec: quote},
    {name: "heading", bindKey: {win: "Alt-H", mac: "Command-Option-H"}, exec: heading},
    {name: "unorderedList", bindKey: {win: "Alt-U", mac: "Command-Option-U"}, exec: unorderedList},
    {name: "orderedList", bindKey: {win: "Alt-O", mac: "Command-Option-O"}, exec: orderedList},
    {name: "foldSelection", bindKey: {win: "Alt-L", mac: "Command-Option-L"}, exec: link},//link
    {name: "image", bindKey: {win: "Alt-G", mac: "Command-Option-G"}, exec: image},
    {name: "preamble", bindKey: {win: "Alt-P", mac: "Command-Option-P"}, exec: preamble},
    {name: "citation", bindKey: {win: "Alt-C", mac: "Command-Option-C"}, exec: citation},
    {name: "render", bindKey: {win: "Ctrl-Enter", mac: "Command-Enter"}, exec: render},
    {name: "inlineMath", bindKey: {win: "Alt-1", mac: "Command-Option-1"}, exec: inlineMath},
    {name: "displayMath", bindKey: {win: "Alt-2", mac: "Command-Option-2"}, exec: displayMath},
    {name: "numberedEquation", bindKey: {win: "Alt-3", mac: "Command-Option-3"}, exec: numberedEquation},
    {name: "alignedEquation", bindKey: {win: "Alt-4", mac: "Command-Option-4"}, exec: alignedEquation},
    {name: "equationReference", bindKey: {win: "Alt-5", mac: "Command-Option-5"}, exec: equationReference},
    //{name: "theorem", bindKey: {win: "Alt-6", mac: "Command-Option-6"}, exec: theorem},
    //{name: "proof", bindKey: {win: "Alt-7", mac: "Command-Option-7"}, exec: proof},
    {name: "fullScreen", bindKey: {win: "F11", mac: "F11"}, exec: fullScreen},
];

commands.forEach(function(command) {
    editor.commands.addCommand(command);
});

function fullScreen() {
    if (editorWrapper.hasClass("editor-full-screen")) {
        editorWrapper.removeClass("editor-full-screen");
        $(this).text("Full Screen");
    } else {
        editorWrapper.addClass("editor-full-screen");
        $(this).text("Normal View");
    }
    editor.resize();
    editor.focus();
    return false;

}

function inlineMath() {
    var selectedText = editor.getSelectedText();
    if (selectedText === "") {
        editor.insertSnippet("$${1:latex code}$");
    }else{
        editor.session.replace(editor.getSelectionRange(), "$" + selectedText.trim() + "$");
    }
    editor.focus();
    return false;
}

function displayMath() {
    var selectedText = editor.getSelectedText();
    if (selectedText === "") {
        editor.insertSnippet("$$${1:latex code}$$");
    }else{
        editor.session.replace(editor.getSelectionRange(), "$$" + selectedText.trim() + "$$");
    }
    editor.focus();
    return false;
}

function numberedEquation() {
    var block=mathBlock();
    var selectedText = editor.getSelectedText();
    if (selectedText === "") {
        editor.insertSnippet(block.open+("\\begin{equation}\n${1:latex code}\n\\end{equation}")+block.close);
    } else {
        editor.session.replace(editor.getSelectionRange(),block.open+("\\begin{equation}\n" + selectedText + "\n\\end{equation}")+block.close);
        editor.gotoLine(editor.getSelectionRange().end.row+1+1-block.close.length);
    }
    editor.focus();
    return false;
}

function alignedEquation() {
    var block=mathBlock();
    var selectedText = editor.getSelectedText();
    if (selectedText === "") {
        editor.insertSnippet(block.open+("\\begin{align*}\n${1:  & first line\\\\\\\\\n  & second line\\\\\\\\\n  & ...}\n\\end{align*}")+block.close);
    } else {
        editor.session.replace(editor.getSelectionRange(),block.open+("\\begin{align*}\n" + selectedText + "\n\\end{align*}")+block.close);
        editor.gotoLine(editor.getSelectionRange().end.row+1+1-block.close.length);
    }
    editor.focus();
    return false;
}

function equationReference(){
    var selectedText = editor.getSelectedText();
    if (selectedText === "") {
        editor.insertSnippet("\\eqref{" + "${1:label}" + "}");
    }else{
        editor.session.replace(editor.getSelectionRange(), "\\eqref{" + selectedText + "}");
    }
    editor.focus();
    return false;
}

function italic() {
    var selectedText = editor.getSelectedText();
    if (selectedText === "") {
        editor.insertSnippet("\\textit{" + "${1:italic text}" + "}");
    } else {
        editor.session.replace(editor.getSelectionRange(), "\\textit{" + selectedText + "}");
    }
    editor.focus();
    return false;
}

function bold() {
    var selectedText = editor.getSelectedText();
    if (selectedText === "") {
        editor.insertSnippet("\\textbf{" + "${1:bold text}" + "}");
    } else {
        editor.session.replace(editor.getSelectionRange(), "\\textbf{" + selectedText + "}");
    }
    editor.focus();
    return false;
}

function quote() {    
    var theBlock=mathBlock();
    var selectedText = editor.getSelectedText();
    if (selectedText === "") {
        editor.insertSnippet(theBlock.open+("\\begin{quote}\n${1:quote}\n\\end{quote}")+theBlock.close);
    } else {
        editor.session.replace(editor.getSelectionRange(), theBlock.open+("\\begin{quote}\n" + selectedText + "\n\\end{quote}")+theBlock.close);
        editor.gotoLine(editor.getSelectionRange().end.row+1+1-theBlock.close.length);
    }
    editor.focus();
    return false;
}

function heading() {
    var theBlock=mathBlock();
    var selectedText = editor.getSelectedText();
    if (selectedText === "") {
        editor.insertSnippet(theBlock.open+("\\section{${1:heading}}")+theBlock.close);
    } else {
        editor.session.replace(editor.getSelectionRange(), theBlock.open+("\\section{" + selectedText + "}")+theBlock.close);
        editor.gotoLine(editor.getSelectionRange().end.row+1+1-theBlock.close.length);
    }
    editor.focus();
    return false;
}

function unorderedList() {
    var theBlock=mathBlock();
    var selectedText = editor.getSelectedText();
    if (selectedText === "") {
        editor.insertSnippet(theBlock.open+("\\begin{itemize}\n${1:  \\\\item item\n  \\\\item item\n  \\\\item ...}\n\\end{itemize}")+theBlock.close);
    } else {
        editor.session.replace(editor.getSelectionRange(), theBlock.open+("\\begin{itemize}\n" + selectedText.replace(/^/gm, "  \\item ") + "\n\\end{itemize}")+theBlock.close);
        editor.gotoLine(editor.getSelectionRange().end.row+1+1-theBlock.close.length);
    }
    editor.focus();
    return false;
}

function orderedList() {
    var theBlock=mathBlock();
    var selectedText = editor.getSelectedText();
    if (selectedText === "") {
        editor.insertSnippet(theBlock.open+("\\begin{enumerate}\n${1:  \\\\item item\n  \\\\item item\n  \\\\item ...}\n\\end{enumerate}")+theBlock.close);
    } else {
        var n=1;
        editor.session.replace(editor.getSelectionRange(), theBlock.open+("\\begin{enumerate}\n" + selectedText.replace(/^/gm, "  \\item ") + "\n\\end{enumerate}")+theBlock.close);
        editor.gotoLine(editor.getSelectionRange().end.row+1+1-theBlock.close.length);
    }
    editor.focus();
    return false;

}

function link() {
    var selectedText = editor.getSelectedText()
    , navTabs = $('<ul/>',{class:"nav nav-tabs", role:"tablist"})
    , navTabTitle = $('<li/>',{class:"disabled"}).append($('<a/>',{html:"Insert Hyperlink"}))
    , navTabUrl = $('<li/>',{role:"presentation", class:"active"}).append($('<a/>',{href:"#url", "aria-controls":"url", role:"tab", "data-toggle":"tab", html:"paste URL"}))
    , navTabFile = $('<li/>',{role:"presentation"}).append($('<a/>',{href:"#file", "aria-controls":"file", role:"tab", "data-toggle":"tab", html:"select file"}))
    , tabContent = $('<div/>',{class:"tab-content"})
    , tabPaneUrl = $('<div/>',{class:"tab-pane active", role:"tabpanel", id:"url"})
    , tabPaneFile = $('<div/>',{class:"tab-pane", role:"tabpanel", id:"file"})
    , inputUrl = $('<input/>',{type:"text", class:"form-control", placeholder:"URL", value:"https://"})
    , formFile = $('<form/>',{enctype:"multipart/form-data"}).append($('<input/>',{type:"hidden", name:"_token", value:#{csrftoken}})).append($('<div/>',{class:"form-group required"}).append('<label for="file-input">File</label><input type="file" name="f1" id="file-input" class="form-control required">'))
    , buttonUrl = $('<button/>',{class:"btn btn-primary", type:"button", html:"Continue"}).click(function() {
        var url = inputUrl.val();
        if(selectedText === ""){
            editor.insertSnippet("\\href{" + url + "}{" + "${1:link description}" + "}");
        }else{
            editor.session.replace(editor.getSelectionRange(), "\\href{" + url + "}{" + selectedText + "}");
        }
        modal.modal("hide");
    })
    , buttonFile = $('<button/>',{class:"btn btn-primary", type:"button", html:"Continue"}).click(function() {
        //https://stackoverflow.com/questions/21044798/how-to-use-formdata-for-ajax-file-upload
        var that=$(this);
        var formData = new FormData(formFile[0]);
        $.ajax({
            url: "@{FilesR}",
            type: "POST",
            processData: false,
            contentType: false,
            cache: false,
            data: formData, 
            beforeSend: function() {
                that.prop("disabled", true);
                that.addClass("loading");
                formFile.find(".form-group").removeClass("has-error").find(".help-block").remove();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                formFile.find(".form-group").addClass("has-error").append('<span class="help-block">Error: ' + errorThrown + '</span>');
            },
            success: function(object, textStatus, jqXHR) {
                if(selectedText === ""){
                    editor.insertSnippet("\\href{" + object.url + "}{" + "${1:link description}" + "}");
                }else{
                    editor.session.replace(editor.getSelectionRange(), "\\href{" + object.url + "}{" + selectedText + "}");
                }
                modal.modal("hide");
            },
            complete: function() {
                that.prop("disabled", false);
                that.removeClass("loading");
            },
        });
    });

    var modal = newModal({
        header: navTabs.append(navTabTitle).append(navTabUrl).append(navTabFile),
        body: tabContent.append(tabPaneUrl.append($('<div/>',{class:"form-group required"}).append('<label>URL</label>').append(inputUrl)).append($('<div/>',{class:"text-right"}).append(buttonUrl))).append(tabPaneFile.append(formFile).append($('<div/>',{class:"text-right"}).append(buttonFile))),
    });

    modal.on('show.bs.modal', function() {
        modal.find('.modal-header').css({"border-bottom":"none", "padding-bottom":0});
        modal.find('.modal-header ul>li:first-child>a').css({"font-weight":"bold", "color":"#333", "padding-left":0});
    });

    modal.on('hidden.bs.modal', function() {
        editor.focus();
        modal.remove();
    });
        
    modal.appendTo("body").modal({show: true});

    return false;
}

function image() {
    var selectedText = editor.getSelectedText()
    , navTabs = $('<ul/>',{class:"nav nav-tabs", role:"tablist"})
    , navTabTitle = $('<li/>',{class:"disabled"}).append($('<a/>',{html:"Add Image"}))
    , navTabUrl = $('<li/>',{role:"presentation", class:"active"}).append($('<a/>',{href:"#url", "aria-controls":"url", role:"tab", "data-toggle":"tab", html:"paste URL"}))
    , navTabFile = $('<li/>',{role:"presentation"}).append($('<a/>',{href:"#file", "aria-controls":"file", role:"tab", "data-toggle":"tab", html:"select file"}))
    , tabContent = $('<div/>',{class:"tab-content"})
    , tabPaneUrl = $('<div/>',{class:"tab-pane active", role:"tabpanel", id:"url"})
    , tabPaneFile = $('<div/>',{class:"tab-pane", role:"tabpanel", id:"file"})
    , inputUrl = $('<input/>',{type:"text", class:"form-control", placeholder:"URL", value:"https://"})
    , formFile = $('<form/>',{enctype:"multipart/form-data"}).append($('<input/>',{type:"hidden", name:"_token", value:#{csrftoken}})).append($('<div/>',{class:"form-group required"}).append('<label for="file-input">File</label><input type="file" name="f1" id="file-input" class="form-control required">'))
    , imageWidth ='<label>Image width</label><input type="text" class="form-control" placeholder="e.g., 100px" value="" name="width">'
    , imageHeight ='<label>Image height</label><input type="text" class="form-control" placeholder="e.g., 100px" value="" name="height">'
    , imageSize = '<div class="form-group" style="display:flex;">'+'<div style="flex:1;margin-right:0.5em;">'+imageWidth+'</div>'+'<div style="flex:1;margin-left:0.5em;">'+imageHeight+'</div>'+'</div>'
    , buttonUrl = $('<button/>',{class:"btn btn-primary", type:"button", html:"Continue"}).click(function() {
        var data = {
            url: inputUrl.val(),
            width: tabPaneUrl.find("input[name='width']").val(),
            height: tabPaneUrl.find("input[name='height']").val(),
        };
        modalToEditor(data);
        modal.modal("hide");
    })
    , buttonFile = $('<button/>',{class:"btn btn-primary", type:"button", html:"Continue"}).click(function() {
        //https://stackoverflow.com/questions/21044798/how-to-use-formdata-for-ajax-file-upload
        var that=$(this);
        var formData = new FormData(formFile[0]);
        $.ajax({
            url: "@{FilesR}",
            type: "POST",
            processData: false,
            contentType: false,
            cache: false,
            data: formData, 
            beforeSend: function() {
                that.prop("disabled", true);
                that.addClass("loading");
                formFile.find(".form-group").removeClass("has-error").find(".help-block").remove();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                formFile.find(".form-group").addClass("has-error").append('<span class="help-block">Error: ' + errorThrown + '</span>');
            },
            success: function(object, textStatus, jqXHR) {
                var data = {
                    url: object.url,
                    width: tabPaneFile.find("input[name='width']").val(),
                    height: tabPaneFile.find("input[name='height']").val(),
                };
                modalToEditor(data);
                modal.modal("hide");
            },
            complete: function() {
                that.prop("disabled", false);
                that.removeClass("loading");
            },
        });
    });
    var modalToEditor = function(data) {
        var url = data.url, width = data.width, height = data.height;
        var more = "";
        if (width.trim() !== "" && height.trim() !== "") {
            more = ", width="+width+", height="+height;
        } else {
            if (width.trim() !== "") {
                more = ", width="+width;
            } 
            if (height.trim() !== "") {
                more = ", height="+height;
            }
        }
        if (selectedText === "") {
            editor.insertSnippet("\\includegraphics"+"[alt={${1:image description}}" + more + "]{" + url + "}");
        } else {
            editor.session.replace(editor.getSelectionRange(), "\\includegraphics"+"[alt={${1:image description}}" + more + "]{" + url + "}");
        }
    }

    var modal = newModal({
        header: navTabs.append(navTabTitle).append(navTabUrl).append(navTabFile),
        body: tabContent.append(tabPaneUrl.append($('<div/>',{class:"form-group required"}).append('<label>URL</label>').append(inputUrl)).append(imageSize).append($('<div/>',{class:"text-right"}).append(buttonUrl))).append(tabPaneFile.append(formFile).append(imageSize).append($('<div/>',{class:"text-right"}).append(buttonFile))),
    });

    modal.on('show.bs.modal', function() {
        modal.find('.modal-header').css({"border-bottom":"none", "padding-bottom":0});
        modal.find('.modal-header ul>li:first-child>a').css({"font-weight":"bold", "color":"#333", "padding-left":0});
    });

    modal.on('hidden.bs.modal', function() {
        editor.focus();
        modal.remove();
    });
        
    modal.appendTo("body").modal({show: true});

    return false;
}

function preamble() {
    var entryPreamble = $('textarea[name="preamble"]');
    var modalPreamble = $('<textarea/>',{class:"form-control",html:entryPreamble.val()});
    var modal = newModal({
        header: '<b>Latex preamble</b>',
        body: $('<div/>').append('<p>Include latex packages and define new commands below.</p>').append(modalPreamble),
        footer: [
            $('<button/>',{class:"btn btn-primary",type:"button",html:"Save"}).click(function() {
                entryPreamble.val(modalPreamble.val());
                modal.modal("hide");
                editor.focus();
            }),
        ],
    });
    modal.appendTo("body").modal({show: true});
    return false;
}

function citation() {
    var entryCitation = $('textarea[name="citation"]');
    var modalCitation = $('<textarea/>',{class:"form-control",html:entryCitation.val()});
    var modal = newModal({
        header: '<b>Citation</b>',
        body: $('<div/>').append('<p>Include bibliography (in BibLaTeX format) below.</p>').append($('<div/>',{class: "form-group"}).append(modalCitation)).append('<p class="text-muted">A biblography item can be cited with <code>\\cite{idetifier}</code>.</div>'),
        footer: [
            $('<button/>',{class:"btn btn-primary",type:"button",html:"Save"}).click(function() {
                entryCitation.val(modalCitation.val());
                modal.modal("hide");
                editor.focus();
            }),
        ],
    });
    modal.appendTo("body").modal({show: true});
    return false;
}

function mathBlock() {
    var blockOpen = "", blockClose = "";
    var selectedRange = editor.getSelectionRange()
    , startRow = selectedRange.start.row
    , startColumn = selectedRange.start.column
    , endRow = selectedRange.end.row
    , endColumn = selectedRange.end.column;
    if (startColumn !== 0) {
        blockOpen = "\n";
    } 
    if (endColumn !== editor.session.getLine(endRow).length) {
        blockClose = "\n";
    } else {
        if (endRow == editor.session.getLength() - 1) {
            blockClose = "\n";
        }
    }
    return {open:blockOpen, close:blockClose};
    //var selectedText = editor.getSelectedText();
    //editor.session.replace(selectedRange, blockOpen + mathType(selectedText) + blockClose); 
    //var newEndRow = endRow + blockOpen.length;
    //editor.gotoLine(newEndRow + 1, editor.session.getLine(newEndRow).length);
    //editor.focus();
    //return false;
}

function block() {
    var blockOpen = "", blockClose = "";
    var selectedRange = editor.getSelectionRange()
    , startRow = selectedRange.start.row
    , startColumn = selectedRange.start.column
    , endRow = selectedRange.end.row
    , endColumn = selectedRange.end.column

    if (editor.session.getLine(startRow).slice(0, startColumn).trim() !== '') {
        blockOpen = "\n\n";
    } else {
        if (startColumn !== 0) {
            blockOpen = "\n";
        } else {
            if (startRow !== 0) {
                var lineBeforeStart = editor.session.getLine(startRow - 1);
                if (lineBeforeStart.trim() !== '') {
                    blockOpen = "\n";
                }
            }
        }
    }
    
    if (editor.session.getLine(endRow).slice(endColumn).trim() !== '') {
        blockClose = "\n\n";
    } else {
        if (endColumn !== editor.session.getLine(endRow).length) {
            blockClose = "\n";
        } else {
            if (endRow !== editor.session.getLength() - 1) {
                var lineAfterEnd = editor.session.getLine(endRow + 1);
                if (lineAfterEnd.trim() !== '') {
                    blockClose ="\n";
                }
            }else{
                blockClose = "\n\n";
            }
        }
    }

    return {open:blockOpen, close:blockClose};
    /*var selectedText = editor.getSelectedText();
    editor.session.replace(selectedRange, blockOpen + blockType(selectedText) + blockClose);

    var newEndRow = endRow + blockOpen.split("\n").length - 1;
    if (blockOpen==="") {
        newEndRow = endRow;
    }
    editor.gotoLine(newEndRow + 1, editor.session.getLine(newEndRow).length);
    editor.focus();
    return false;*/
}

/* common functions */

var editorContainer = $(editor.container);
var previewArea = $("<div/>",{class: "entry-content-wrapper"});
var entryBody = $("textarea[name='content']");
editor.session.setValue(entryBody.val());
editorWrapper.append(editorContainer).append($("<div/>",{class: "editor-preview"}).append(previewArea)).insertAfter(entryBody).css({width: "100%", border:entryBody.css("border"), "border-radius":entryBody.css("border-radius")});
//var entryFormat = $("select[name='format']");
//$(".editor-toolbar>ul>li:last-child").append(entryFormat);
entryBody.hide();
window.editor = editor;
editor.focus();
editorContainer.addClass("editor-focus");
editor.on("focus", function() {
    editorContainer.addClass("editor-focus");
});
editor.on("blur", function() {
    editorContainer.removeClass("editor-focus");
});


$('select[name="format"]').change(function(){
    var selected=$(this).children("option:selected").val();
    var format="md"
    if (selected=="2"){
        format="tex"
    }
    var currentUrl = window.location.href.split(/[?#]/)[0]+ '?format=' + format;
    var elementId = window.location.href.match(/#[^?]*/);
    if (elementId){
        currentUrl=currentUrl+elementId;
    }   
    window.location.href = currentUrl 
});

//prevent refeshing page if the content is not saved
var originalContent=editor.getValue();
$("form").submit(function(){
    entryBody.val(editor.getValue());
    originalContent=editor.getValue();
});
$(window).on('beforeunload', function(){
    if (editor.getValue()!=originalContent){
        return confirm("You have unsaved changes. Are you sure you want to leave this page?");
    }
});

render();

function render() {
    entryBody.val(editor.getValue());
    var loading = $('<span/>',{class: "loading"});
    var entryData = JSON.stringify ({
                editorContent: entryBody.val(),
                editorPreamble: $('textarea[name="preamble"]').val(),
                editorCitation: $('textarea[name="citation"]').val(),
            });
    $.ajax({
        type: "POST",
        dataType: "text",
        global: false,
        url: "@{parserRoute}",
        data: entryData,
        contentType:"application/json; charset=utf-8",
        //data: options.previewParserVar+'='+encodeURIComponent(parsedData),
        beforeSend: function() {
            previewArea.append(loading);
        },
        success: function(data) {
            previewArea.html(data);
        },
        complete: function() {
            loading.remove();
        },
    });
    return false;
}

function newModal(options) {
    //options: {header, body, footer}
    var modal = $('<div/>',{class: "modal fade", tabindex: "-1", role: "dialog"});
    var dialog = $('<div/>',{class: "modal-dialog", role: "document"});
    var content = $('<div/>',{class: "modal-content"});
    var header = $('<div/>',{class: "modal-header"});
    var body = $('<div/>',{class: "modal-body"});
    var footer = $('<div/>',{class: "modal-footer"});
    var close = $('<button/>',{class:"close",html:'<span aria-hidden="true">&times;</span>', type:"button", "aria-label":"Close"}).click(function() {
        modal.modal("hide");
    });
    modal.append(dialog);
    dialog.append(content);
    content.append(header);
    content.append(body);
    header.append(close);
    header.append(options.header);
    body.append(options.body);
    if(options.footer){
        content.append(footer);
        footer.append(options.footer);
    } 
    return modal;
}